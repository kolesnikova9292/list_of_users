{"version":3,"sources":["logo.svg","providers/redux/auth/actions.js","providers/redux/auth/reducer.js","providers/redux/auth/selectors.js","login/LoginForm.js","login/index.js","table/TableInner.js","table/index.js","PrivateRoute.js","App.js","serviceWorker.js","providers/redux/store.js","providers/redux/auth/middlewares.js","index.js"],"names":["module","exports","fetchAuthRequest","createAction","fetchAuthSucces","fetchAuthFailure","token","handleActions","_state","action","payload","isAuthorized","error","combineReducers","getToken","state","getAuthFlag","getError","mapDispatchToProps","connect","props","useForm","register","handleSubmit","errors","setValue","useState","open","setOpen","useEffect","handleLogIn","data","a","login","password","history","push","className","Card","onSubmit","as","TextField","label","color","type","rules","required","helperText","returnError","name","Button","value","Snackbar","anchorOrigin","vertical","horizontal","onClose","ContentProps","message","id","undefined","Login","usersPrimal","setUsersPrimal","users","setUsers","React","order","setOrder","searchInput","setSearchInput","getList","axios","get","headers","Accept","Authorization","result","handleRequestSort","event","sortArray","sort","b","TableContainer","component","Paper","TableSortLabel","active","direction","onClick","InputBase","placeholder","inputProps","onChange","e","target","IconButton","aria-label","newArr","filter","x","username","toLowerCase","indexOf","TableHead","TableRow","TableCell","TableBody","map","row","key","first_name","last_name","is_active","is_superuser","Table","PrivateRoute","RouteComponent","loginPath","rest","render","routeProps","to","basename","path","exact","Boolean","window","location","hostname","match","store","createStore","rootReducer","compose","applyMiddleware","thunk","next","toString","post","then","status","dispatch","catch","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.68128880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createAction } from \"redux-actions\";\r\n\r\nexport const fetchAuthRequest = createAction(\"GET_AUTH_REQUEST\");\r\nexport const fetchAuthSucces = createAction(\"GET_AUTH_SUCCESS\");\r\nexport const fetchAuthFailure = createAction(\"GET_AUTH_FAILURE\");\r\n","import { handleActions } from \"redux-actions\";\r\nimport { combineReducers } from \"redux\";\r\nimport { fetchAuthSucces, fetchAuthFailure } from \"./actions\";\r\n\r\nconst token = handleActions(\r\n  {\r\n    [fetchAuthSucces]: (_state, action) => action.payload.token,\r\n    [fetchAuthFailure]: () => null,\r\n  },\r\n  null\r\n);\r\n\r\nconst isAuthorized = handleActions(\r\n  {\r\n    [fetchAuthSucces]: () => true,\r\n    [fetchAuthFailure]: () => false,\r\n  },\r\n  false\r\n);\r\n\r\nconst error = handleActions(\r\n  {\r\n    [fetchAuthFailure]: (_state, action) => \"Ошибка аутентификации\",\r\n  },\r\n  null\r\n);\r\n\r\nexport default combineReducers({\r\n  token,\r\n  isAuthorized,\r\n  error,\r\n});\r\n","export const getToken = (state) => state.token;\r\nexport const getAuthFlag = (state) => state.isAuthorized;\r\nexport const getError = (state) => state.error;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Card, Button, TextField, Snackbar } from \"@material-ui/core\";\r\nimport {\r\n  getAuthFlag,\r\n  getError,\r\n  fetchAuthRequest,\r\n} from \"../providers/redux/auth\";\r\nimport \"./LoginForm.css\";\r\n\r\nconst LoginForm = (props) => {\r\n  const { register, handleSubmit, errors, setValue } = useForm();\r\n  const { fetchAuthRequest, isAuthorized, error } = props;\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setValue(\"login\", \"test_super\");\r\n    setValue(\"password\", \"Nf<U4f<rDbtDxAPn\");\r\n\r\n    if (error != null) {\r\n      setOpen(true);\r\n    }\r\n  }, [isAuthorized, error, setValue]);\r\n\r\n  const handleLogIn = async (data) => {\r\n    const { login, password } = data;\r\n    await fetchAuthRequest({ login, password });\r\n    props.history.push(\"/table\");\r\n  };\r\n\r\n  const handleCloseSnackBar = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"divForForm\">\r\n      <Card className=\"cardForForm\">\r\n        <form onSubmit={handleSubmit(handleLogIn)}>\r\n          <RHFInput\r\n            as={\r\n              <TextField\r\n                className=\"textFieldForLoginForm\"\r\n                label=\"Логин\"\r\n                color=\"secondary\"\r\n                type=\"text\"\r\n                error={errors.login != null ? true : false}\r\n              />\r\n            }\r\n            rules={{\r\n              required: true,\r\n            }}\r\n            helperText={returnError(errors.login)}\r\n            name=\"login\"\r\n            register={register}\r\n            setValue={setValue}\r\n          />\r\n          <br />\r\n          <RHFInput\r\n            as={\r\n              <TextField\r\n                label=\"Пароль\"\r\n                color=\"secondary\"\r\n                type=\"text\"\r\n                className=\"textFieldForLoginForm\"\r\n                error={errors.password != null ? true : false}\r\n              />\r\n            }\r\n            helperText={returnError(errors.password)}\r\n            rules={{ required: true }}\r\n            name=\"password\"\r\n            register={register}\r\n            setValue={setValue}\r\n          />\r\n          <br />\r\n          <Button type=\"submit\" value=\"Войти\">\r\n            Войти\r\n          </Button>\r\n        </form>\r\n      </Card>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        open={open}\r\n        onClose={handleCloseSnackBar}\r\n        ContentProps={{\r\n          \"aria-describedby\": \"message-id\",\r\n        }}\r\n        message={<span id=\"message-id\">{error}</span>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = { fetchAuthRequest };\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n    error: getError(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n\r\nexport function returnError(error) {\r\n  return error !== undefined && error.type === \"required\"\r\n    ? \"Поле обязательно\"\r\n    : null;\r\n}\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport const Login = (props) => {\r\n  return (\r\n    <>\r\n      <LoginForm {...props} />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getAuthFlag, getToken } from \"../providers/redux/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TableSortLabel,\r\n  InputBase,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./Table.css\";\r\n\r\nconst TableInner = (props) => {\r\n  const { token } = props;\r\n\r\n  const [usersPrimal, setUsersPrimal] = useState([]);\r\n\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  const getList = async (token) => {\r\n    var result = await axios.get(\r\n      \"https://emphasoft-test-assignment.herokuapp.com/api/v1/users/\",\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      }\r\n    );\r\n    setUsersPrimal(result.data);\r\n    setUsers(result.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getList(token);\r\n  }, []);\r\n\r\n  const handleRequestSort = (event) => {\r\n    const isAsc = order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    sortArray(order);\r\n  };\r\n\r\n  const sortArray = (order) => {\r\n    if (order === \"asc\") {\r\n      users.sort((a, b) => (a.id > b.id ? 1 : -1));\r\n    }\r\n    if (order === \"desc\") {\r\n      users.sort((a, b) => (a.id < b.id ? 1 : -1));\r\n    }\r\n  };\r\n\r\n  const handleChangeSearchInput = (e) => {\r\n    setSearchInput(e.target.value);\r\n  };\r\n\r\n  const filterUsers = (e) => {\r\n    let newArr = [...usersPrimal];\r\n    setUsers(newArr);\r\n    setUsers(\r\n      newArr.filter(\r\n        (x) => x.username.toLowerCase().indexOf(searchInput.toLowerCase()) > -1\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableContainer className=\"tableConteiner\" component={Paper}>\r\n        <TableSortLabel\r\n          active={true}\r\n          direction={order}\r\n          onClick={handleRequestSort}\r\n          className=\"button-for-mobile\"\r\n        >\r\n          Сортировать по номеру\r\n        </TableSortLabel>\r\n        <InputBase\r\n          placeholder=\"Фильтр по логину\"\r\n          inputProps={{ \"aria-label\": \"search google maps\" }}\r\n          value={searchInput}\r\n          onChange={handleChangeSearchInput}\r\n        />\r\n        <IconButton aria-label=\"search\" onClick={filterUsers}>\r\n          <SearchIcon />\r\n        </IconButton>\r\n        <Table className=\"tableInner\" aria-label=\"simple table\">\r\n          <TableHead className=\"table-head\">\r\n            <TableRow>\r\n              <TableCell className=\"cell_header\">\r\n                <TableSortLabel\r\n                  active={true}\r\n                  direction={order}\r\n                  onClick={handleRequestSort}\r\n                >\r\n                  №\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              <TableCell className=\"cell_header\">Имя</TableCell>\r\n              <TableCell className=\"cell_header\">Фамилия</TableCell>\r\n              <TableCell className=\"cell_header\">Логин</TableCell>\r\n              <TableCell className=\"cell_header\">Активность</TableCell>\r\n              <TableCell className=\"cell_header\">Администратор</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {users.map((row) => (\r\n              <TableRow component=\"tr\" key={row.id}>\r\n                <TableCell className=\"cell\" aria-label=\"Номер\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Имя\">\r\n                  {row.first_name}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Фамилия\">\r\n                  {row.last_name}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Логин\">\r\n                  {row.username}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Активность\">\r\n                  {row.is_active === true ? \"yes\" : \"no\"}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Администратор\">\r\n                  {row.is_superuser === true ? \"yes\" : \"no\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n    token: getToken(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TableInner);\r\n","import React from \"react\";\r\nimport TableInner from \"./TableInner\";\r\n\r\nexport const Table = (props) => {\r\n  return (\r\n    <>\r\n      <h1>Пользователи</h1>\r\n      <TableInner {...props} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = ({\r\n  component: RouteComponent,\r\n  isAuthorized,\r\n  loginPath,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={(routeProps) =>\r\n      isAuthorized ? (\r\n        <RouteComponent {...routeProps} />\r\n      ) : (\r\n        <Redirect to={loginPath} />\r\n      )\r\n    }\r\n  />\r\n);\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  Route,\n  Switch,\n  Redirect,\n  BrowserRouter,\n  HashRouter,\n} from \"react-router-dom\";\nimport { Login } from \"./login\";\nimport { Table } from \"./table\";\nimport { PrivateRoute } from \"./PrivateRoute\";\nimport { connect } from \"react-redux\";\nimport { getAuthFlag } from \"./providers/redux/auth\";\nimport { useRouterHistory } from \"react-router\";\n\nconst App = (props) => {\n  const { isAuthorized } = props;\n\n  /*const basename = \"test\";\n  const history = useRouterHistory(createHistory)({\n    basename,\n  });*/\n\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Switch>\n          <PrivateRoute\n            path=\"/table\"\n            component={Table}\n            exact\n            isAuthorized={isAuthorized}\n            loginPath=\"/\"\n          />\n          <Route path=\"/\" render={(props) => <Login {...props} />} exact />\n          <Route\n            path=\"/\"\n            component={isAuthorized === true ? Table : Login}\n            exact\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthorized: getAuthFlag(state),\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { loftTaxiMiddleware } from \"./auth\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./auth\";\r\n\r\nexport const initialState = {\r\n  token: null,\r\n  isAuthorized: false,\r\n  error: null,\r\n};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(applyMiddleware(thunk), applyMiddleware(loftTaxiMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import { fetchAuthRequest, fetchAuthSucces, fetchAuthFailure } from \"./actions\";\r\nimport axios from \"axios\";\r\n\r\nexport const loftTaxiMiddleware = (store) => (next) => async (action) => {\r\n  if (action.type === fetchAuthRequest.toString()) {\r\n    await axios\r\n      .post(\r\n        \"https://emphasoft-test-assignment.herokuapp.com/api-token-auth/\",\r\n        {\r\n          username: action.payload.login,\r\n          password: action.payload.password,\r\n        },\r\n        { headers: { \"Content-Type\": \"application/json\" } }\r\n      )\r\n      .then((data) => {\r\n        if (data.status === 200) store.dispatch(fetchAuthSucces(data.data));\r\n        else store.dispatch(fetchAuthFailure(\"error\"));\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(fetchAuthFailure(error));\r\n      });\r\n  }\r\n\r\n  const result = next(action);\r\n  return result;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./providers/redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}