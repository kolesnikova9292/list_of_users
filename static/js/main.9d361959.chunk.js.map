{"version":3,"sources":["providers/redux/auth/actions.js","providers/redux/auth/reducer.js","providers/redux/auth/selectors.js","pages/login/LoginForm.js","pages/login/index.js","PrivateRoute.js","pages/table/TableInner.js","pages/table/index.js","pages/ChoosePage.js","header/Header.js","pages/table/AlertDialog.js","App.js","serviceWorker.js","providers/redux/store.js","providers/redux/auth/middlewares.js","index.js"],"names":["fetchAuthRequest","createAction","fetchAuthSucces","fetchAuthFailure","logout","token","handleActions","_state","action","payload","isAuthorized","error","combineReducers","getToken","state","getAuthFlag","getError","mapDispatchToProps","connect","props","useForm","register","handleSubmit","errors","setValue","useState","open","setOpen","useEffect","handleLogIn","data","a","login","password","className","Card","onSubmit","as","TextField","label","color","type","rules","required","helperText","returnError","name","Button","value","Snackbar","anchorOrigin","vertical","horizontal","onClose","ContentProps","message","id","undefined","Login","PrivateRoute","RouteComponent","component","loginPath","rest","render","routeProps","to","usersPrimal","setUsersPrimal","users","setUsers","React","order","setOrder","searchInput","setSearchInput","getList","axios","get","headers","Accept","Authorization","result","localStorage","setItem","handleRequestSort","event","sortArray","sort","b","filterUsers","newArr","filter","x","username","toLowerCase","indexOf","TableContainer","Paper","TableSortLabel","active","direction","onClick","InputBase","placeholder","inputProps","onChange","e","target","onKeyPress","key","preventDefault","IconButton","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","first_name","last_name","is_active","is_superuser","Table","path","exact","handleLogoutTry","AlertDialog","handleYes","handleNo","handleClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","basename","removeItem","Boolean","window","location","hostname","match","initialState","getItem","store","createStore","rootReducer","compose","applyMiddleware","thunk","next","toString","post","then","status","dispatch","catch","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9d361959.chunk.js","sourcesContent":["import { createAction } from \"redux-actions\";\r\n\r\nexport const fetchAuthRequest = createAction(\"GET_AUTH_REQUEST\");\r\nexport const fetchAuthSucces = createAction(\"GET_AUTH_SUCCESS\");\r\nexport const fetchAuthFailure = createAction(\"GET_AUTH_FAILURE\");\r\nexport const logout = createAction(\"LOGOUT_USER\");\r\n","import { handleActions } from \"redux-actions\";\r\nimport { combineReducers } from \"redux\";\r\nimport { fetchAuthSucces, fetchAuthFailure, logout } from \"./actions\";\r\n\r\nconst token = handleActions(\r\n  {\r\n    [fetchAuthSucces]: (_state, action) => action.payload.token,\r\n    [fetchAuthFailure]: () => null,\r\n    [logout]: () => null,\r\n  },\r\n  null\r\n);\r\n\r\nconst isAuthorized = handleActions(\r\n  {\r\n    [fetchAuthSucces]: () => true,\r\n    [fetchAuthFailure]: () => false,\r\n    [logout]: () => null,\r\n  },\r\n  false\r\n);\r\n\r\nconst error = handleActions(\r\n  {\r\n    [fetchAuthFailure]: (_state, action) => \"Ошибка аутентификации\",\r\n  },\r\n  null\r\n);\r\n\r\nexport default combineReducers({\r\n  token,\r\n  isAuthorized,\r\n  error,\r\n});\r\n","export const getToken = (state) => state.token;\r\nexport const getAuthFlag = (state) => state.isAuthorized;\r\nexport const getError = (state) => state.error;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { RHFInput } from \"react-hook-form-input\";\r\nimport { Card, Button, TextField, Snackbar } from \"@material-ui/core\";\r\nimport {\r\n  getAuthFlag,\r\n  getError,\r\n  fetchAuthRequest,\r\n  logout,\r\n} from \"../../providers/redux/auth\";\r\nimport \"./LoginForm.css\";\r\n\r\nconst LoginForm = (props) => {\r\n  const { register, handleSubmit, errors, setValue } = useForm();\r\n  const { fetchAuthRequest, isAuthorized, error } = props;\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setValue(\"login\", \"test_super\");\r\n    setValue(\"password\", \"Nf<U4f<rDbtDxAPn\");\r\n\r\n    if (error != null) {\r\n      setOpen(true);\r\n    }\r\n  }, [isAuthorized, error, setValue]);\r\n\r\n  const handleLogIn = async (data) => {\r\n    const { login, password } = data;\r\n    await fetchAuthRequest({ login, password });\r\n    //props.history.push(\"/table\");\r\n  };\r\n\r\n  const handleCloseSnackBar = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"divForForm\">\r\n      <Card className=\"cardForForm\">\r\n        <form onSubmit={handleSubmit(handleLogIn)}>\r\n          <RHFInput\r\n            as={\r\n              <TextField\r\n                className=\"textFieldForLoginForm\"\r\n                label=\"Логин\"\r\n                color=\"secondary\"\r\n                type=\"text\"\r\n                error={errors.login != null ? true : false}\r\n              />\r\n            }\r\n            rules={{\r\n              required: true,\r\n            }}\r\n            helperText={returnError(errors.login)}\r\n            name=\"login\"\r\n            register={register}\r\n            setValue={setValue}\r\n          />\r\n          <br />\r\n          <RHFInput\r\n            as={\r\n              <TextField\r\n                label=\"Пароль\"\r\n                color=\"secondary\"\r\n                type=\"text\"\r\n                className=\"textFieldForLoginForm\"\r\n                error={errors.password != null ? true : false}\r\n              />\r\n            }\r\n            helperText={returnError(errors.password)}\r\n            rules={{ required: true }}\r\n            name=\"password\"\r\n            register={register}\r\n            setValue={setValue}\r\n          />\r\n          <br />\r\n          <Button type=\"submit\" value=\"Войти\">\r\n            Войти\r\n          </Button>\r\n        </form>\r\n      </Card>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        open={open}\r\n        onClose={handleCloseSnackBar}\r\n        ContentProps={{\r\n          \"aria-describedby\": \"message-id\",\r\n        }}\r\n        message={<span id=\"message-id\">{error}</span>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = { fetchAuthRequest, logout };\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n    error: getError(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n\r\nexport function returnError(error) {\r\n  return error !== undefined && error.type === \"required\"\r\n    ? \"Поле обязательно\"\r\n    : null;\r\n}\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst Login = (props) => <LoginForm {...props} />;\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = ({\r\n  component: RouteComponent,\r\n  isAuthorized,\r\n  loginPath,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={(routeProps) =>\r\n      isAuthorized ? (\r\n        <RouteComponent {...routeProps} />\r\n      ) : (\r\n        <Redirect to={loginPath} />\r\n      )\r\n    }\r\n  />\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getAuthFlag, getToken } from \"../../providers/redux/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  TableSortLabel,\r\n  InputBase,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport \"./Table.css\";\r\n\r\nconst TableInner = (props) => {\r\n  const { token } = props;\r\n\r\n  const [usersPrimal, setUsersPrimal] = useState([]);\r\n\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  const getList = async (token) => {\r\n    var result = await axios.get(\r\n      \"https://emphasoft-test-assignment.herokuapp.com/api/v1/users/\",\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      }\r\n    );\r\n    setUsersPrimal(result.data);\r\n    setUsers(result.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      localStorage.setItem(\"token\", token);\r\n    }\r\n    getList(token);\r\n  }, []);\r\n\r\n  const handleRequestSort = (event) => {\r\n    const isAsc = order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    sortArray(order);\r\n  };\r\n\r\n  const sortArray = (order) => {\r\n    if (order === \"asc\") {\r\n      users.sort((a, b) => (a.id > b.id ? 1 : -1));\r\n    }\r\n    if (order === \"desc\") {\r\n      users.sort((a, b) => (a.id < b.id ? 1 : -1));\r\n    }\r\n  };\r\n\r\n  const handleChangeSearchInput = (e) => {\r\n    setSearchInput(e.target.value);\r\n  };\r\n\r\n  const filterUsers = () => {\r\n    let newArr = [...usersPrimal];\r\n    setUsers(newArr);\r\n    setUsers(\r\n      newArr.filter(\r\n        (x) => x.username.toLowerCase().indexOf(searchInput.toLowerCase()) > -1\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableContainer className=\"tableConteiner\" component={Paper}>\r\n        <TableSortLabel\r\n          active={true}\r\n          direction={order}\r\n          onClick={handleRequestSort}\r\n          className=\"button-for-mobile\"\r\n        >\r\n          Сортировать по номеру\r\n        </TableSortLabel>\r\n        <InputBase\r\n          placeholder=\"Фильтр по логину\"\r\n          inputProps={{ \"aria-label\": \"search google maps\" }}\r\n          value={searchInput}\r\n          onChange={handleChangeSearchInput}\r\n          onKeyPress={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              e.preventDefault();\r\n              filterUsers();\r\n            }\r\n          }}\r\n        />\r\n        <IconButton aria-label=\"search\" onClick={filterUsers}>\r\n          <SearchIcon />\r\n        </IconButton>\r\n        <Table className=\"tableInner\" aria-label=\"simple table\">\r\n          <TableHead className=\"table-head\">\r\n            <TableRow>\r\n              <TableCell className=\"cell_header\">\r\n                <TableSortLabel\r\n                  active={true}\r\n                  direction={order}\r\n                  onClick={handleRequestSort}\r\n                >\r\n                  №\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              <TableCell className=\"cell_header\">Имя</TableCell>\r\n              <TableCell className=\"cell_header\">Фамилия</TableCell>\r\n              <TableCell className=\"cell_header\">Логин</TableCell>\r\n              <TableCell className=\"cell_header\">Активность</TableCell>\r\n              <TableCell className=\"cell_header\">Администратор</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {users.map((row) => (\r\n              <TableRow component=\"tr\" key={row.id}>\r\n                <TableCell className=\"cell\" aria-label=\"Номер\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Имя\">\r\n                  {row.first_name}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Фамилия\">\r\n                  {row.last_name}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Логин\">\r\n                  {row.username}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Активность\">\r\n                  {row.is_active === true ? \"yes\" : \"no\"}\r\n                </TableCell>\r\n                <TableCell className=\"cell\" aria-label=\"Администратор\">\r\n                  {row.is_superuser === true ? \"yes\" : \"no\"}\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n    token: getToken(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TableInner);\r\n","import React from \"react\";\r\nimport TableInner from \"./TableInner\";\r\n\r\nconst Table = (props) => {\r\n  return (\r\n    <>\r\n      <h1>Пользователи</h1>\r\n      <TableInner {...props} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useEffect } from \"react\";\r\nimport Login from \"./login\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { PrivateRoute } from \"../PrivateRoute\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAuthFlag } from \"../providers/redux/auth\";\r\nimport Table from \"./table\";\r\n\r\nconst ChoosePage = (props) => {\r\n  const { isAuthorized } = props;\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <PrivateRoute\r\n          path=\"/table\"\r\n          component={Table}\r\n          exact\r\n          isAuthorized={isAuthorized}\r\n          loginPath=\"/\"\r\n        />\r\n\r\n        <Route\r\n          path=\"/\"\r\n          render={(props) => {\r\n            if (isAuthorized == null || isAuthorized === false)\r\n              return <Login {...props} />;\r\n            else return <Redirect to=\"/table\" />;\r\n          }}\r\n          exact\r\n        />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChoosePage);\r\n\r\n/*<Route\r\npath=\"/logout\"\r\nrender={(props) => <Login {...props} goAway={true} />}\r\nexact\r\n/>*/\r\n","import React from \"react\";\r\nimport { getAuthFlag } from \"../providers/redux/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = (props) => {\r\n  const { isAuthorized, handleLogoutTry } = props;\r\n  return (\r\n    <div className=\"outer_div\">\r\n      {isAuthorized === true && (\r\n        <>\r\n          <Button onClick={handleLogoutTry} className=\"logout_button\">\r\n            Выйти\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n\r\n/*\r\n <Button\r\n            component={Link}\r\n            //to=\"/\"\r\n\r\n            to=\"/logout\"\r\n            id=\"logout\"\r\n            className=\"logout_button\"\r\n          >\r\n            Выйти\r\n          </Button>*/\r\n\r\n/*const Header = (props) => {\r\n  const { isAuthorized } = props;\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {isAuthorized === true ? (\r\n            <>\r\n              <Button component={Link} to=\"/map\" id=\"my-map\">\r\n                Карта\r\n              </Button>\r\n              <Button\r\n                component={Link}\r\n                to=\"/personal\"\r\n                id=\"personal-area\"\r\n                data-testid=\"personal-area\"\r\n              >\r\n                Профиль\r\n              </Button>\r\n              <Button component={Link} to=\"/logout\" id=\"logout\">\r\n                Выйти\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <Button component={Link} to=\"/login\" id=\"login\">\r\n              Войти\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};*/\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst AlertDialog = (props) => {\r\n  const { open, handleYes, handleNo, handleClose } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Выход\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            Вы действительно хотите выйти из приложения?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleYes} color=\"primary\">\r\n            Да\r\n          </Button>\r\n          <Button onClick={handleNo} color=\"primary\" autoFocus>\r\n            Нет\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertDialog;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n  BrowserRouter,\r\n  HashRouter,\r\n} from \"react-router-dom\";\r\nimport ChoosePage from \"./pages/ChoosePage\";\r\nimport Header from \"./header/Header\";\r\nimport { connect } from \"react-redux\";\r\n//import { getAuthFlag } from \"./providers/redux/auth\";\r\nimport { logout } from \"./providers/redux/auth\";\r\nimport AlertDialog from \"./pages/table/AlertDialog\";\r\n\r\nconst App = (props) => {\r\n  const { logout } = props;\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleLogoutTry = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleYes = () => {\r\n    setOpen(false);\r\n    logout();\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  const handleNo = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  /*const basename = \"test\";\r\n  const history = useRouterHistory(createHistory)({\r\n    basename,\r\n  });*/\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename=\"/\">\r\n        <Header handleLogoutTry={handleLogoutTry} />\r\n        <ChoosePage />\r\n        <AlertDialog\r\n          open={open}\r\n          handleClose={handleClose}\r\n          handleNo={handleNo}\r\n          handleYes={handleYes}\r\n        />\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\n/*const mapStateToProps = (state) => {\r\n  return {\r\n    isAuthorized: getAuthFlag(state),\r\n  };\r\n};*/\r\n\r\nconst mapDispatchToProps = { logout };\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n\r\n/*<Switch>\r\n          <PrivateRoute\r\n            path=\"/table\"\r\n            component={Table}\r\n            exact\r\n            isAuthorized={isAuthorized}\r\n            loginPath=\"/\"\r\n          />\r\n          <Route path=\"/\" render={(props) => <Login {...props} />} exact />\r\n          <Route\r\n            path=\"/\"\r\n            component={isAuthorized === true ? Table : Login}\r\n            exact\r\n          />\r\n          <Redirect to=\"/\" />\r\n        </Switch>*/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { emphasoftMiddleware } from \"./auth\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./auth\";\r\n\r\nexport const initialState = {\r\n  token: localStorage.getItem(\"token\") ? localStorage.getItem(\"token\") : null,\r\n  isAuthorized: localStorage.getItem(\"token\") ? true : false,\r\n  error: null,\r\n};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(applyMiddleware(thunk), applyMiddleware(emphasoftMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import { fetchAuthRequest, fetchAuthSucces, fetchAuthFailure } from \"./actions\";\r\nimport axios from \"axios\";\r\n\r\nexport const emphasoftMiddleware = (store) => (next) => async (action) => {\r\n  if (action.type === fetchAuthRequest.toString()) {\r\n    await axios\r\n      .post(\r\n        \"https://emphasoft-test-assignment.herokuapp.com/api-token-auth/\",\r\n        {\r\n          username: action.payload.login,\r\n          password: action.payload.password,\r\n        },\r\n        { headers: { \"Content-Type\": \"application/json\" } }\r\n      )\r\n      .then((data) => {\r\n        if (data.status === 200) store.dispatch(fetchAuthSucces(data.data));\r\n        else store.dispatch(fetchAuthFailure(\"error\"));\r\n      })\r\n      .catch((error) => {\r\n        store.dispatch(fetchAuthFailure(error));\r\n      });\r\n  }\r\n\r\n  const result = next(action);\r\n  return result;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./providers/redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}